[
    {
        "title": "Check Even or Odd",
        "description": "Determine whether the given integer is even or odd.",
        "difficulty": "EASY",
        "tags": ["maths", "conditions", "modulo"],
        "examples": [
            {
                "input": "4",
                "output": "Even",
                "explation": "4 is divisible by 2, so it's even."
            },
            {
                "input": "7",
                "output": "Odd",
                "explation": "7 is not divisible by 2, so it's odd."
            }
        ],
        "constraints": " -10^9 <= n <= 10^9 ",
        "testCases": [
            {
                "input": "0",
                "output": "Even",
                "type": "public"
            },
            {
                "input": "-3",
                "output": "Odd",
                "type": "public"
            },
            {
                "input": "-8",
                "output": "Even",
                "type": "public"
            },
            {
                "input": "999999999",
                "output": "Odd",
                "type": "private"
            }
        ],
        "codeSnippets": {
            "JAVASCRIPT": "const fs = require('fs');\n\nfunction checkEvenOdd(n) {\n    return n % 2 === 0 ? 'Even' : 'Odd';\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst n = Number(input);\nconsole.log(checkEvenOdd(n));",
            "PYTHON": "def check_even_odd(n):\n    return 'Even' if n % 2 == 0 else 'Odd'\n\nimport sys\nn = int(sys.stdin.read())\nprint(check_even_odd(n))",
            "JAVA": "import java.util.Scanner;\n\npublic class Main {\n    public static String checkEvenOdd(int n) {\n        return (n % 2 == 0) ? \"Even\" : \"Odd\";\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(checkEvenOdd(n));\n    }\n}",
            "CPP": "#include <iostream>\nusing namespace std;\n\nstring checkEvenOdd(int n) {\n    return (n % 2 == 0) ? \"Even\" : \"Odd\";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << checkEvenOdd(n) << endl;\n    return 0;\n}"
        },
        "referenceSolutions": {
            "JAVASCRIPT": "const fs = require('fs');\nconst n = Number(fs.readFileSync(0, 'utf-8').trim());\nconsole.log(n % 2 === 0 ? 'Even' : 'Odd');",
            "PYTHON": "import sys\nn = int(sys.stdin.read())\nprint('Even' if n % 2 == 0 else 'Odd')",
            "JAVA": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(n % 2 == 0 ? \"Even\" : \"Odd\");\n    }\n}",
            "CPP": "#include <iostream>\nusing namespace std;\nint main() {\n    int n;\n    cin >> n;\n    cout << (n % 2 == 0 ? \"Even\" : \"Odd\") << endl;\n    return 0;\n}"
        },
        "hints": "Use the modulo operator (%) to determine if the number is divisible by 2.",
        "editorial": "To determine if a number is even or odd, we use the modulo operation. If `n % 2` equals 0, the number is even; otherwise, it's odd. This approach works for both positive and negative integers. Most programming languages have efficient support for this operation, and it runs in constant time."
    },

    {
        "title": "Multiply Two Numbers",
        "description": "Multiply the two numbers",
        "difficulty": "EASY",
        "tags": ["maths", "operators", "numbers"],
        "examples": [
            {
                "input": "4 5",
                "output": "20",
                "explation": "Multiplying 4 and 5 gives 20."
            },
            {
                "input": "-3 6",
                "output": "-18",
                "explation": "Multiplying -3 and 6 gives -18."
            }
        ],
        "constraints": " -10^9 <= a, b <= 10^9  ",
        "testCases": [
            {
                "input": "10 20",
                "output": "200"
            },
            {
                "input": "-5 -5",
                "output": "25"
            },
            {
                "input": "0 999",
                "output": "0"
            },
            {
                "input": "-1000000 1000000",
                "output": "-1000000000000"
            }
        ],
        "codeSnippets": {
            "JAVASCRIPT": "const fs = require('fs');\n\nfunction multiplyTwoNumbers(a, b) {\n    // Write your code here\n    return a * b;\n}\n\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst [a, b] = input.split(' ').map(Number);\nconsole.log(multiplyTwoNumbers(a, b));",
            "PYTHON": "def multiply_two_numbers(a, b):\n    # Write your code here\n    return a * b\n\nimport sys\ninput_line = sys.stdin.read()\na, b = map(int, input_line.split())\nprint(multiply_two_numbers(a, b))",
            "JAVA": "import java.util.Scanner;\n\npublic class Main {\n    public static int multiplyTwoNumbers(int a, int b) {\n        return a * b;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(multiplyTwoNumbers(a, b));\n    }\n}",
            "CPP": "#include <iostream>\nusing namespace std;\n\nint multiplyTwoNumbers(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << multiplyTwoNumbers(a, b) << endl;\n    return 0;\n}"
        },
        "referenceSolutions": {
            "JAVASCRIPT": "const fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst [a, b] = input.split(' ').map(Number);\nconsole.log(a * b);",
            "PYTHON": "import sys\ninput_line = sys.stdin.read()\na, b = map(int, input_line.split())\nprint(a * b)",
            "JAVA": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(a * b);\n    }\n}",
            "CPP": "#include <iostream>\nusing namespace std;\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << a * b << endl;\n    return 0;\n}"
        }
    },
    {
        "title": "Add Two Numbers",
        "description": "sum the two numbers",
        "difficulty": "EASY",
        "tags": ["maths", "operators", "numbers"],
        "examples": [
            {
                "input": "3 7",
                "output": "10",
                "explation": "Adding 3 and 7 gives 10."
            },
            {
                "input": "2 4",
                "output": "6",
                "explation": "Adding 2 and 4 gives 6."
            }
        ],
        "constraints": " -10^9 <= a, b <= 10^9  ",
        "testCases": [
            {
                "input": "100 200",
                "output": "300"
            },
            {
                "input": "200 200",
                "output": "400"
            },
            {
                "input": "0 0",
                "output": "0"
            },
            {
                "input": "-500 -600",
                "output": "-1100"
            }
        ],
        "codeSnippets": {
            "JAVASCRIPT": "const fs = require('fs');\n\nfunction addTwoNumbers(a, b) {\n    // Write your code here\n    // Return the sum of a and b\n    return a + b;\n}\n\n// Reading input from stdin (using fs to read all input)\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst [a, b] = input.split(' ').map(Number);\n\nconsole.log(addTwoNumbers(a, b));",
            "PYTHON": "def add_two_numbers(a, b):\n    # Write your code here\n    # Return the sum of a and b\n    return a + b\n\nimport sys\ninput_line = sys.stdin.read()\na, b = map(int, input_line.split())\nprint(add_two_numbers(a, b))",
            "JAVA": "import java.util.Scanner;\n\npublic class Main {\n    public static int addTwoNumbers(int a, int b) {\n        // Write your code here\n        // Return the sum of a and b\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(addTwoNumbers(a, b));\n    }\n}",
            "CPP": "#include <iostream>\nusing namespace std;\n\nint addTwoNumbers(int a, int b) {\n    // Write your code here\n    // Return the sum of a and b\n    return a + b;\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << addTwoNumbers(a, b) << endl;\n    return 0;\n}"
        },
        "referenceSolutions": {
            "JAVASCRIPT": "const fs = require('fs');\n\n// Reading input from stdin (using fs to read all input)\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst [a, b] = input.split(' ').map(Number);\n\nconsole.log(a + b);",
            "PYTHON": "import sys\ninput_line = sys.stdin.read()\na, b = map(int, input_line.split())\nprint(a + b)",
            "JAVA": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(a + b);\n    }\n}",
            "CPP": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << a + b << endl;\n    return 0;\n}"
        }
    },

    {
        "title": "Check Prime Number",
        "description": "Determine whether the given integer is a prime number.",
        "difficulty": "EASY",
        "tags": ["maths", "conditions", "prime"],
        "examples": [
            {
                "input": "7",
                "output": "Prime",
                "explation": "7 has no divisors other than 1 and itself."
            },
            {
                "input": "10",
                "output": "Not Prime",
                "explation": "10 is divisible by 2 and 5."
            }
        ],
        "constraints": "-10^9 <= n <= 10^9",
        "testCases": [
            {
                "input": "2",
                "output": "Prime",
                "type": "public"
            },
            {
                "input": "-3",
                "output": "Not Prime",
                "type": "public"
            },
            {
                "input": "-8",
                "output": "Not Prime",
                "type": "public"
            },
            {
                "input": "-999999999",
                "output": "Not Prime",
                "type": "private"
            },
            {
                "input": "999999999",
                "output": "Not Prime",
                "type": "private"
            }
        ],
        "codeSnippets": {
            "JAVASCRIPT": "// Function to check if a number is prime\nfunction isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\n// Reading input from stdin\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst n = Number(input);\nconsole.log(isPrime(n) ? 'Prime' : 'Not Prime');",
            "PYTHON": "# Function to check if a number is prime\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Reading input from stdin\nimport sys\ninput_line = sys.stdin.read().strip()\nn = int(input_line)\nprint('Prime' if is_prime(n) else 'Not Prime')",
            "JAVA": "// Function to check if a number is prime\npublic class Main {\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(isPrime(n) ? \"Prime\" : \"Not Prime\");\n    }\n}",
            "CPP": "// Function to check if a number is prime\n#include <iostream>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << (isPrime(n) ? \"Prime\" : \"Not Prime\") << endl;\n    return 0;\n}"
        },
        "referenceSolutions": {
            "JAVASCRIPT": "// Function to check if a number is prime\nfunction isPrime(n) {\n    if (n <= 1) return false;\n    for (let i = 2; i * i <= n; i++) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\n// Reading input from stdin\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconst n = Number(input);\nconsole.log(isPrime(n) ? 'Prime' : 'Not Prime');",
            "PYTHON": "# Function to check if a number is prime\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Reading input from stdin\nimport sys\ninput_line = sys.stdin.read().strip()\nn = int(input_line)\nprint('Prime' if is_prime(n) else 'Not Prime')",
            "JAVA": "// Function to check if a number is prime\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(isPrime(n) ? \"Prime\" : \"Not Prime\");\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}",
            "CPP": "// Function to check if a number is prime\n#include <iostream>\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << (isPrime(n) ? \"Prime\" : \"Not Prime\") << endl;\n    return 0;\n}"
        },
        "hints": "A prime number is greater than 1 and has no divisors other than 1 and itself. Check divisibility from 2 to the square root of n.",
        "editorial": "To determine if a number is prime, we check if it has any divisors other than 1 and itself. The most efficient way to do this is to check divisibility from 2 up to the square root of the number. If we find any divisor in this range, the number is not prime. This method is efficient and works well for both small and large integers."
    },
    {
        "title": "Check Palindrome",
        "description": "Determine whether the given string is a palindrome.",
        "difficulty": "EASY",
        "tags": ["strings", "conditions", "palindrome"],
        "examples": [
            {
                "input": "racecar",
                "output": "Palindrome",
                "explation": "'racecar' reads the same forwards and backwards."
            },
            {
                "input": "hello",
                "output": "Not Palindrome",
                "explation": "'hello' does not read the same forwards and backwards."
            }
        ],
        "constraints": "-10^9 <= n <= 10^9",
        "testCases": [
            {
                "input": "madam",
                "output": "Palindrome",
                "type": "public"
            },
            {
                "input": "12321",
                "output": "Palindrome",
                "type": "public"
            },
            {
                "input": "!@#@!",
                "output": "Not Palindrome",
                "type": "public"
            },
            {
                "input": "",
                "output": "Not Palindrome",
                "type": "private"
            }
        ],
        "codeSnippets": {
            "JAVASCRIPT": "// Function to check if a string is a palindrome\nfunction isPalindrome(str) {\n    const reversed = str.split('').reverse().join('');\n    return str === reversed;\n}\n\n// Reading input from stdin\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconsole.log(isPalindrome(input) ? 'Palindrome' : 'Not Palindrome');",
            "PYTHON": "# Function to check if a string is a palindrome\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Reading input from stdin\nimport sys\ninput_line = sys.stdin.read().strip()\nprint('Palindrome' if is_palindrome(input_line) else 'Not Palindrome')",
            "JAVA": "// Function to check if a string is a palindrome\npublic class Main {\n    public static boolean isPalindrome(String str) {\n        String reversed = new StringBuilder(str).reverse().toString();\n        return str.equals(reversed);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        System.out.println(isPalindrome(input) ? \"Palindrome\" : \"Not Palindrome\");\n    }\n}",
            "CPP": "// Function to check if a string is a palindrome\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nbool isPalindrome(string str) {\n    string reversed = str;\n    reverse(reversed.begin(), reversed.end());\n    return str == reversed;\n}\n\nint main() {\n    string input;\n    cin >> input;\n    cout << (isPalindrome(input) ? \"Palindrome\" : \"Not Palindrome\") << endl;\n    return 0;\n}"
        },
        "referenceSolutions": {
            "JAVASCRIPT": "// Function to check if a string is a palindrome\nfunction isPalindrome(str) {\n    if (str === \"\") {\n        return false;  // Return false if the string is empty\n    }\n    const reversed = str.split('').reverse().join('');\n    return str === reversed;\n}\n\n// Reading input from stdin\nconst fs = require('fs');\nconst input = fs.readFileSync(0, 'utf-8').trim();\nconsole.log(isPalindrome(input) ? 'Palindrome' : 'Not Palindrome');",
            "PYTHON": "# Function to check if a string is a palindrome\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Reading input from stdin\nimport sys\ninput_line = sys.stdin.read().strip()\nprint('Palindrome' if is_palindrome(input_line) else 'Not Palindrome')",
            "JAVA": "// Function to check if a string is a palindrome\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String input = sc.nextLine();\n        System.out.println(isPalindrome(input) ? \"Palindrome\" : \"Not Palindrome\");\n    }\n\n    public static boolean isPalindrome(String str) {\n        String reversed = new StringBuilder(str).reverse().toString();\n        return str.equals(reversed);\n    }\n}",
            "CPP": "// Function to check if a string is a palindrome\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nbool isPalindrome(string str) {\n    string reversed = str;\n    reverse(reversed.begin(), reversed.end());\n    return str == reversed;\n}\n\nint main() {\n    string input;\n    cin >> input;\n    cout << (isPalindrome(input) ? \"Palindrome\" : \"Not Palindrome\") << endl;\n    return 0;\n}"
        }
    }
]
